{"version":3,"file":"ngfire-auth.mjs","sources":["../../../../libs/ngfire/auth/src/operators.ts","../../../../libs/ngfire/auth/src/tokens.ts","../../../../libs/ngfire/auth/src/auth.ts","../../../../libs/ngfire/auth/src/ngfire-auth.ts"],"sourcesContent":["import type { Auth, User } from \"firebase/auth\";\r\nimport { onIdTokenChanged } from \"firebase/auth\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nexport function user(auth: Auth): Observable<User|null> {\r\n  return new Observable(subscriber => {\r\n    const unsubscribe = onIdTokenChanged(\r\n      auth, \r\n      subscriber.next.bind(subscriber), \r\n      subscriber.error.bind(subscriber), \r\n      subscriber.complete.bind(subscriber),\r\n    );\r\n    return { unsubscribe };\r\n  });\r\n}\r\n","import { inject, InjectionToken } from \"@angular/core\";\r\nimport { Auth, getAuth, initializeAuth } from \"firebase/auth\";\r\nimport { FIREBASE_APP } from \"ngfire/app\";\r\nimport { AUTH_DEPS, getConfig } from \"ngfire/tokens\";\r\n\r\nexport const FIRE_AUTH = new InjectionToken<Auth>('Fire auth instance', {\r\n  providedIn: 'root',\r\n  factory: () => {\r\n    const config = getConfig();\r\n    const app = inject(FIREBASE_APP);\r\n    const deps = inject(AUTH_DEPS, { optional: true }) || undefined;\r\n    if (config.auth) {\r\n      return config.auth(app, deps);\r\n    } else {\r\n      return deps ? initializeAuth(app, deps) : getAuth(app);\r\n    }\r\n  },\r\n});\r\n\r\n","import { inject, Injectable, Injector, NgZone, PLATFORM_ID } from \"@angular/core\";\r\nimport { isPlatformServer } from \"@angular/common\";\r\nimport { doc, getDoc, writeBatch, runTransaction } from \"firebase/firestore\";\r\nimport { UserCredential, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendEmailVerification, signOut, signInAnonymously, signInWithPopup, signInWithCustomToken, AuthProvider, User, getAdditionalUserInfo } from \"firebase/auth\";\r\nimport type { WriteBatch, DocumentSnapshot, DocumentReference, UpdateData } from 'firebase/firestore';\r\nimport { user } from './operators';\r\nimport { fromRef, toDate, FIRESTORE } from 'ngfire/firestore';\r\nimport { shareWithDelay, keepUnstableUntilFirst, AtomicWrite, MetaDocument, UpdateCallback } from 'ngfire/core';\r\nimport { filter, map, switchMap, shareReplay } from \"rxjs/operators\";\r\nimport { firstValueFrom, from, Observable, of } from \"rxjs\";\r\nimport { FIRE_AUTH } from \"./tokens\";\r\n\r\nconst exist = <T>(v?: T | null): v is T => v !== null && v !== undefined;\r\n\r\nexport interface AuthWriteOptions<Ctx = any> {\r\n  write?: AtomicWrite;\r\n  ctx?: Ctx;\r\n  collection?: null | string;\r\n}\r\n\r\n\r\n/**\r\n * Get the custom claims of a user. If no key is provided, return the whole claims object\r\n * @param user The user object returned by Firebase Auth\r\n * @param roles Keys of the custom claims inside the claim objet\r\n */\r\nexport async function getCustomClaims<Claims extends Record<string, any>>(\r\n  user: User,\r\n  keys?: string | string[]\r\n): Promise<Claims> {\r\n  if (!user) return {} as Claims;\r\n  const { claims } = await user.getIdTokenResult();\r\n  if (!keys) return claims as Claims;\r\n\r\n  const fields = Array.isArray(keys) ? keys : [keys];\r\n  const result: Record<string, any> = {};\r\n  for (const key of fields) {\r\n    if (claims[key]) {\r\n      result[key] = claims[key];\r\n    }\r\n  }\r\n  return result as Claims;\r\n}\r\n\r\n\r\nexport function isUpdateCallback<T>(\r\n  update: UpdateCallback<T> | Partial<T>\r\n): update is UpdateCallback<T> {\r\n  return typeof update === 'function';\r\n}\r\n\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport abstract class BaseFireAuth<Profile, Roles = undefined> {\r\n  private memoProfile: Record<string, Observable<DocumentSnapshot<Profile>>> = {};\r\n  private platformId = inject(PLATFORM_ID);\r\n  protected getAuth = inject(FIRE_AUTH);\r\n  protected injector = inject(Injector);\r\n  private zone = inject(NgZone);\r\n\r\n  protected abstract path: string | undefined;\r\n  protected idKey = 'id';\r\n  protected verificationUrl?: string;\r\n\r\n  protected abstract signin(...arg: any[]): Promise<UserCredential>;\r\n  protected abstract signout(): Promise<void>;\r\n\r\n  protected get db() {\r\n    return this.injector.get(FIRESTORE);\r\n  }\r\n\r\n  get auth() {\r\n    return this.injector.get(FIRE_AUTH);\r\n  }\r\n\r\n  get user() {\r\n    return this.auth.currentUser;\r\n  }\r\n\r\n  user$ = isPlatformServer(this.platformId)\r\n    ? this.zone.runOutsideAngular(() => user(this.auth))\r\n    : user(this.auth).pipe(shareReplay({ refCount: true, bufferSize: 1 }));\r\n\r\n  /**\r\n   * Observe current user. Doesn't emit if there are no user connected.\r\n   * Use `user` if you need to know if user is connected\r\n   */\r\n  currentUser$ = this.user$.pipe(filter(exist));\r\n\r\n  /** Listen on changes from the authenticated user */\r\n  profile$ = this.user$.pipe(\r\n    map((user) => this.getRef({ user })),\r\n    switchMap((ref) => (ref ? this.useMemo(ref) : of(undefined))),\r\n    map(snapshot => snapshot ? this.fromFirestore(snapshot) : undefined),\r\n  );\r\n\r\n  /** Triggered when the profile has been created */\r\n  protected onCreate?(profile: Partial<Profile>, options: AuthWriteOptions): unknown;\r\n  /** Triggered when the profile has been updated */\r\n  protected onUpdate?(profile: Partial<Profile>, options: AuthWriteOptions): unknown;\r\n  /** Triggered when the profile has been deleted */\r\n  protected onDelete?(options: AuthWriteOptions): unknown;\r\n  /** Triggered when user signin for the first time or signup with email & password */\r\n  protected onSignup?(credential: UserCredential, options: AuthWriteOptions): unknown;\r\n  /** Triggered when a user signin, except for the first time @see onSignup */\r\n  protected onSignin?(credential: UserCredential): unknown;\r\n  /** Triggered when a user signout */\r\n  protected onSignout?(): unknown;\r\n\r\n  protected useMemo(ref: DocumentReference<Profile>) {\r\n    if (isPlatformServer(this.platformId)) {\r\n      return this.zone.runOutsideAngular(() => from(getDoc(ref))).pipe(keepUnstableUntilFirst(this.zone));\r\n    }\r\n    if (!this.memoProfile[ref.path]) {\r\n      this.memoProfile[ref.path] = fromRef(ref).pipe(\r\n        shareWithDelay(100),\r\n      );\r\n    }\r\n    return this.memoProfile[ref.path];\r\n  }\r\n\r\n  /**\r\n   * Select the roles for this user. Can be in custom claims or in a Firestore collection\r\n   * @param user The user given by FireAuth\r\n   * @see getCustomClaims to get the custom claims out of the user\r\n   * @note Can be overwritten\r\n   */\r\n  protected selectRoles(user: User): Promise<Roles> | Observable<Roles> {\r\n    return getCustomClaims<any>(user);\r\n  }\r\n\r\n  /**\r\n   * Function triggered when getting data from firestore\r\n   * @note should be overwritten\r\n   */\r\n  protected fromFirestore(snapshot: DocumentSnapshot<Profile>) {\r\n    return snapshot.exists()\r\n      ? ({ ...toDate(snapshot.data()), [this.idKey]: snapshot.id } as Profile)\r\n      : undefined;\r\n  }\r\n\r\n  /**\r\n   * Function triggered when adding/updating data to firestore\r\n   * @note should be overwritten\r\n   */\r\n  protected toFirestore(profile: Partial<Profile>, actionType: 'add' | 'update'): any {\r\n    if (actionType === 'add') {\r\n      const _meta: MetaDocument = { createdAt: new Date(), modifiedAt: new Date() };\r\n      return { _meta, ...profile };\r\n    } else {\r\n      return { ...profile, '_meta.modifiedAt': new Date() };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function triggered when transforming a user into a profile\r\n   * @param user The user object from FireAuth\r\n   * @param ctx The context given on signup\r\n   */\r\n  protected createProfile(user: User, ctx?: any): Promise<Partial<Profile>> | Partial<Profile> {\r\n    return { avatar: user?.photoURL, displayName: user?.displayName } as any;\r\n  }\r\n\r\n  /** Triggerd when creating or getting a user */\r\n  protected useCollection(user: User): undefined | null | string | Promise<undefined | null | string> {\r\n    return this.path ?? null;\r\n  }\r\n\r\n  /** If user connected, return its document in Firestore,  */\r\n  protected getRef(options: { user?: User | null; collection?: string | null } = {}) {\r\n    const user = options.user ?? this.user;\r\n    if (user) {\r\n      return doc(this.db, `${this.path}/${user.uid}`) as DocumentReference<Profile>\r\n    }\r\n    return;\r\n  }\r\n\r\n  /** Return current user. Only return when auth has emit */\r\n  awaitUser() {\r\n    return firstValueFrom(this.user$);\r\n  }\r\n\r\n  /** Get the current user Profile from Firestore */\r\n  async getValue() {\r\n    const ref = this.getRef();\r\n    if (ref) {\r\n      const snapshot = await getDoc(ref);\r\n      return this.fromFirestore(snapshot);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * @description Delete user from authentication service and database\r\n   * WARNING This is security sensitive operation\r\n   */\r\n  async delete(options: AuthWriteOptions = {}) {\r\n    const user = this.user;\r\n    const ref = this.getRef({ user });\r\n    if (!user || !ref) {\r\n      throw new Error('No user connected');\r\n    }\r\n    const { write = writeBatch(this.db), ctx } = options;\r\n    write.delete(ref);\r\n    if (this.onDelete) await this.onDelete({ write, ctx });\r\n    if (!options.write) {\r\n      await (write as WriteBatch).commit();\r\n    }\r\n    return user.delete();\r\n  }\r\n\r\n  /** Update the current profile of the authenticated user */\r\n  async update(\r\n    profile: Partial<Profile> | UpdateCallback<Profile>,\r\n    options: AuthWriteOptions = {}\r\n  ) {\r\n    const ref = this.getRef();\r\n    if (!ref) {\r\n      throw new Error('No user connected.');\r\n    }\r\n    if (isUpdateCallback(profile)) {\r\n      return runTransaction(this.db, async (tx) => {\r\n        const snapshot = (await tx.get(ref)) as DocumentSnapshot<Profile>;\r\n        const doc = this.fromFirestore(snapshot);\r\n        if (!doc) {\r\n          throw new Error(`Could not find document at \"${this.path}/${snapshot.id}\"`);\r\n        }\r\n        const data = await profile(this.toFirestore(doc, 'update'), tx);\r\n        tx.update(ref, data as any);\r\n        if (this.onUpdate) await this.onUpdate(data, { write: tx, ctx: options.ctx });\r\n        return tx;\r\n      });\r\n    } else if (typeof profile === 'object') {\r\n      const { write = writeBatch(this.db), ctx } = options;\r\n      (write as WriteBatch).update(ref, this.toFirestore(profile, 'update'));\r\n      if (this.onUpdate) await this.onUpdate(profile, { write, ctx });\r\n      // If there is no atomic write provided\r\n      if (!options.write) {\r\n        return (write as WriteBatch).commit();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Manage the creation of the user into Firestore */\r\n  protected async create(cred: UserCredential, options: AuthWriteOptions) {\r\n    const user = cred.user;\r\n    if (!user) {\r\n      throw new Error('Could not create an account');\r\n    }\r\n\r\n    const { write = writeBatch(this.db), ctx, collection } = options;\r\n    if (this.onSignup) await this.onSignup(cred, { write, ctx, collection });\r\n\r\n    const ref = this.getRef({ user, collection });\r\n    if (ref) {\r\n      const profile = await this.createProfile(user, ctx);\r\n      (write as WriteBatch).set(ref, this.toFirestore(profile, 'add'));\r\n      if (this.onCreate) await this.onCreate(profile, { write, ctx, collection });\r\n      if (!options.write) {\r\n        await (write as WriteBatch).commit();\r\n      }\r\n    }\r\n    return cred;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport abstract class FireAuth<Profile, Roles = undefined> extends BaseFireAuth<Profile, Roles> {\r\n  protected abstract path: string | undefined;\r\n\r\n  /**\r\n   * Create a user based on email and password\r\n   * Will send a verification email to the user if verificationURL is provided config\r\n   */\r\n  async signup(\r\n    email: string,\r\n    password: string,\r\n    options: AuthWriteOptions = {}\r\n  ): Promise<UserCredential> {\r\n    const cred = await createUserWithEmailAndPassword(this.auth, email, password);\r\n    if (this.verificationUrl) {\r\n      const url = this.verificationUrl;\r\n      await sendEmailVerification(cred.user, { url });\r\n    }\r\n    return this.create(cred, options);\r\n  }\r\n\r\n  /** Signin with email & password, provider name, provider objet or custom token */\r\n  // tslint:disable-next-line: unified-signatures\r\n  signin(email: string, password: string, options?: AuthWriteOptions): Promise<UserCredential>;\r\n  signin(authProvider: AuthProvider, options?: AuthWriteOptions): Promise<UserCredential>;\r\n  // tslint:disable-next-line: unified-signatures\r\n  signin(token: string, options?: AuthWriteOptions): Promise<UserCredential>;\r\n  async signin(\r\n    provider?: AuthProvider | string,\r\n    passwordOrOptions?: string | AuthWriteOptions,\r\n    options?: AuthWriteOptions\r\n  ): Promise<UserCredential> {\r\n    try {\r\n      let cred: UserCredential;\r\n      if (!provider) {\r\n        cred = await signInAnonymously(this.auth);\r\n      } else if (\r\n        passwordOrOptions &&\r\n        typeof provider === 'string' &&\r\n        typeof passwordOrOptions === 'string'\r\n      ) {\r\n        cred = await signInWithEmailAndPassword(this.auth, provider, passwordOrOptions);\r\n      } else if (typeof provider === 'object') {\r\n        cred = await signInWithPopup(this.auth, provider);\r\n      } else {\r\n        cred = await signInWithCustomToken(this.auth, provider);\r\n      }\r\n      if (!cred.user) {\r\n        throw new Error('Could not find credential for signin');\r\n      }\r\n\r\n      // Signup: doesn't trigger onSignin\r\n      if (getAdditionalUserInfo(cred)?.isNewUser) {\r\n        options = typeof passwordOrOptions === 'object' ? passwordOrOptions : {};\r\n        return this.create(cred, options);\r\n      }\r\n\r\n      if (this.onSignin) await this.onSignin(cred);\r\n      return cred;\r\n    } catch (err: any) {\r\n      if (err.code === 'auth/operation-not-allowed') {\r\n        console.warn('You tried to connect with a disabled auth provider. Enable it in Firebase console');\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /** Signs out the current user and clear the store */\r\n  async signout() {\r\n    await signOut(this.auth);\r\n    if (this.onSignout) await this.onSignout();\r\n  }\r\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}