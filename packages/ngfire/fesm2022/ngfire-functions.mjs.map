{"version":3,"file":"ngfire-functions.mjs","sources":["../../../../libs/ngfire/functions/src/tokens.ts","../../../../libs/ngfire/functions/src/functions.ts","../../../../libs/ngfire/functions/src/ngfire-functions.ts"],"sourcesContent":["import { inject, InjectionToken } from \"@angular/core\";\r\nimport { Functions, getFunctions } from \"firebase/functions\";\r\nimport { FIREBASE_APP } from \"ngfire/app\";\r\nimport { getConfig, REGION_OR_DOMAIN } from \"ngfire/tokens\";\r\n\r\nexport const CLOUD_FUNCTIONS = new InjectionToken<Functions>('Firebase cloud functions', {\r\n  providedIn: 'root',\r\n  factory: () => {\r\n    const config = getConfig();\r\n    const regionOrDomain = inject(REGION_OR_DOMAIN, { optional: true });\r\n    const app = inject(FIREBASE_APP);\r\n    if (config.functions) {\r\n      return config.functions(app, regionOrDomain ?? undefined);\r\n    } else {\r\n      return getFunctions(app, regionOrDomain ?? undefined);\r\n    }\r\n  },\r\n});\r\n","import { inject, Injectable, Injector } from \"@angular/core\";\r\nimport { httpsCallable, HttpsCallable, HttpsCallableOptions } from \"firebase/functions\";\r\nimport { CLOUD_FUNCTIONS } from \"./tokens\";\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallableFunctions {\r\n  private injector = inject(Injector);\r\n  private callables: Record<string, HttpsCallable> = {};\r\n\r\n  protected get function() {\r\n    return this.injector.get(CLOUD_FUNCTIONS);\r\n  }\r\n\r\n  prepare<I, O>(name: string): (data: I) => Promise<O> {\r\n    if (!this.callables[name]) {\r\n      this.callables[name] = httpsCallable(this.function, name);\r\n    }\r\n    return (data: I) => this.call(name, data);\r\n  }\r\n\r\n  async call<I, O>(\r\n    name: string,\r\n    data: I,\r\n    options?: HttpsCallableOptions \r\n  ): Promise<O> {\r\n    if (!this.callables[name]) {\r\n      this.callables[name] = httpsCallable(this.function, name, options);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const result = await this.callables[name]!(data);\r\n    return result.data as any;\r\n  }\r\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;MAKa,eAAe,GAAG,IAAI,cAAc,CAAY,0BAA0B,EAAE;AACvF,IAAA,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,MAAK;AACZ,QAAA,MAAM,MAAM,GAAG,SAAS,EAAE;AAC1B,QAAA,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;AACnE,QAAA,MAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC;AAChC,QAAA,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,cAAc,IAAI,SAAS,CAAC;;aACpD;YACL,OAAO,YAAY,CAAC,GAAG,EAAE,cAAc,IAAI,SAAS,CAAC;;KAExD;AACF,CAAA;;MCXY,iBAAiB,CAAA;AACpB,IAAA,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC3B,SAAS,GAAkC,EAAE;AAErD,IAAA,IAAc,QAAQ,GAAA;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC;;AAG3C,IAAA,OAAO,CAAO,IAAY,EAAA;QACxB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACzB,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;;AAE3D,QAAA,OAAO,CAAC,IAAO,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;;AAG3C,IAAA,MAAM,IAAI,CACR,IAAY,EACZ,IAAO,EACP,OAA8B,EAAA;QAE9B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACzB,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC;;;AAGpE,QAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC,IAAI,CAAC;QAChD,OAAO,MAAM,CAAC,IAAW;;uGAzBhB,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA;AAAjB,IAAA,OAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,cADJ,MAAM,EAAA,CAAA;;2FACnB,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAD7B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;ACLlC;;AAEG;;;;"}